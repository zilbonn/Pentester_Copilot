import asyncio
import subprocess
import shlex
from gpt_api import query_gpt

async def get_available_payloads():
    cmd = "msfvenom --list payloads"
    output = await run_command(cmd)
    payloads = output.split('\n')[4:-1]
    return [payload.strip() for payload in payloads]

async def get_payload_descriptions():
    cmd = "msfvenom --list payloads -d"
    output = await run_command(cmd)
    lines = output.split('\n')[4:-2]
    descriptions = {}
    for line in lines:
        parts = line.split(None, 1)
        if len(parts) == 2:
            name, description = parts
            descriptions[name] = description.strip()
    return descriptions

async def filter_payloads_by_format(payloads, descriptions, file_format):
    compatible_payloads = []

    for payload in payloads:
        description = descriptions.get(payload, '')
        is_compatible = await query_gpt(file_format, description)
        if is_compatible:
            compatible_payloads.append(payload)

    return compatible_payloads

async def run_command(cmd):
    process = await asyncio.create_subprocess_shell(
        cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )

    stdout, stderr = await process.communicate()

    if stderr:
        raise Exception(f"Error running command: {cmd}\nError: {stderr.decode()}")

    return stdout.decode()

async def suggest_exploits(vulnerability, target_software, target_version, file_format):
    payloads = await get_available_payloads()
    descriptions = await get_payload_descriptions()

    filtered_payloads = []

    for payload in payloads:
        if vulnerability.lower() in payload.lower() and target_software.lower() in payload.lower():
            filtered_payloads.append(payload)

    compatible_payloads = await filter_payloads_by_format(filtered_payloads, descriptions, file_format)

    return compatible_payloads
