import asyncio
from aioconsole import ainput
from gpt_api import query_gpt
from reverse_generator import generate_payload, list_payloads
from phishing_email_generator import generate_phishing_email
from note_taker import NoteTaker

def print_robot_banner():
    banner = r"""
 ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄        ▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄               
▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░▌      ▐░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌              
▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀▀▀ ▐░▌░▌     ▐░▌ ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀█░█▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌              
▐░▌       ▐░▌▐░▌          ▐░▌▐░▌    ▐░▌     ▐░▌     ▐░▌          ▐░▌               ▐░▌     ▐░▌          ▐░▌       ▐░▌              
▐░█▄▄▄▄▄▄▄█░▌▐░█▄▄▄▄▄▄▄▄▄ ▐░▌ ▐░▌   ▐░▌     ▐░▌     ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄      ▐░▌     ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌              
▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌  ▐░▌  ▐░▌     ▐░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌              
▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀▀▀ ▐░▌   ▐░▌ ▐░▌     ▐░▌     ▐░█▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀█░▌     ▐░▌     ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀█░█▀▀               
▐░▌          ▐░▌          ▐░▌    ▐░▌▐░▌     ▐░▌     ▐░▌                    ▐░▌     ▐░▌     ▐░▌          ▐░▌     ▐░▌                
▐░▌          ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌     ▐░▐░▌     ▐░▌     ▐░█▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░█▄▄▄▄▄▄▄▄▄ ▐░▌      ▐░▌               
▐░▌          ▐░░░░░░░░░░░▌▐░▌      ▐░░▌     ▐░▌     ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░░░░░░░░░░░▌▐░▌       ▐░▌              
 ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀        ▀▀       ▀       ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀       ▀       ▀▀▀▀▀▀▀▀▀▀▀  ▀         ▀               
                                                                                                                                   
                                         ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄  ▄            ▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄▄▄ 
                                        ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌
                                        ▐░█▀▀▀▀▀▀▀▀▀ ▐░█▀▀▀▀▀▀▀█░▌▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀ ▐░▌          ▐░█▀▀▀▀▀▀▀█░▌ ▀▀▀▀█░█▀▀▀▀ 
                                        ▐░▌          ▐░▌       ▐░▌▐░▌       ▐░▌     ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     
                                        ▐░▌          ▐░▌       ▐░▌▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     
                                        ▐░▌          ▐░▌       ▐░▌▐░░░░░░░░░░░▌     ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     
                                        ▐░▌          ▐░▌       ▐░▌▐░█▀▀▀▀▀▀▀▀▀      ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     
                                        ▐░▌          ▐░▌       ▐░▌▐░▌               ▐░▌     ▐░▌          ▐░▌       ▐░▌     ▐░▌     
                                        ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌▐░▌           ▄▄▄▄█░█▄▄▄▄ ▐░█▄▄▄▄▄▄▄▄▄ ▐░█▄▄▄▄▄▄▄█░▌     ▐░▌     
                                        ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░▌          ▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌▐░░░░░░░░░░░▌     ▐░▌     
                                         ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀            ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀▀       ▀      
                                                                                                                                   
                                                                                                                        
"""
    print(banner)


async def main():
    print_robot_banner()
    note_taker = NoteTaker()

    while True:
        print("\nMenu:")
        print("1. Strategy Suggestion")
        print("2. Reverse Generation")
        print("3. Take Notes")
        print("4. Write Phishing Email")
        print("5. Exit")

        choice = await ainput("Enter your choice: ")

        if choice == "1":
            pentest_type = await ainput("Enter the type of pentest (e.g., Internal, Web, Wifi): ")

            while True:
                target_environment = await ainput("Enter the target environment (e.g., Windows, Linux, Web App): ")
                known_vulnerabilities = await ainput("Enter any known vulnerabilities (e.g., SQL Injection, XSS), separated by commas: ")
                network_topology = await ainput("Enter the network topology if known (e.g., DMZ, internal network, VPN): ")
                available_tools = await ainput("Enter available tools you'd like to use (e.g., Nmap, Metasploit, Burp Suite), separated by commas: ")
                enumeration_info = await ainput("Enter any findings from the enumeration phase (e.g., open ports, running services), separated by commas: ")
                login_info = await ainput("Do you have login credentials? ")

                strategy = await query_gpt(f"Based on the {pentest_type} pentest, target environment {target_environment}, known vulnerabilities {known_vulnerabilities}, network topology {network_topology}, available tools {available_tools}, enumeration info {enumeration_info}, and login info {login_info}, what is a recommended strategy for a pentester?")
                print("\nSuggested strategy:")
                print(strategy)

                satisfaction = await ainput("Are you satisfied with the suggested strategy? (yes/no): ")
                if satisfaction.lower() == "yes":
                    break

                print("\nPlease provide more information to help improve the strategy:")
                additional_info = await ainput("Enter additional information: ")

                strategy = await query_gpt(f"Considering the additional information {additional_info}, what is a better strategy for a pentester targeting {target_environment} with vulnerabilities {known_vulnerabilities}, network topology {network_topology}, tools {available_tools}, enumeration info {enumeration_info}, and login info {login_info}?")
                print("\nUpdated strategy:")
                print(strategy)
            
        elif choice == "2":
            print("Available payloads:")
            payloads_output = list_payloads()
            print(payloads_output)

            target_software = await ainput("Enter the target software (e.g., windows): ")
            file_format = await ainput("Enter the payload format (e.g., exe): ")

            print("\nSuggested payloads:")
            suggested_payloads = await query_gpt(f"Which payloads are compatible with {target_software} and {file_format}?")
            for payload in suggested_payloads.split(', '):
                print(f"- {payload.strip()}")

            chosen_payload = await ainput("Enter the desired payload: ")
            lhost = await ainput("Enter the LHOST: ")
            lport = await ainput("Enter the LPORT: ")
            file_name = await ainput("Enter the file name: ")

            payload = generate_payload(chosen_payload, file_format, lhost, lport, file_name)
            print(f"\nGenerated payload: {payload}")

        elif choice == "3":
            target_name = await ainput("Enter the target name (e.g., machine, web app, domain): ")
            notes = await ainput("Enter your notes in markdown format: ")

            file_path = note_taker.save_notes(target_name, notes)
            print(f"\nNotes saved to: {file_path}")
        elif choice == "4":
            description = await ainput("Enter a description of the phishing email: ")
            phishing_email = await generate_phishing_email(description)
            print("\nGenerated phishing email:")
            print(phishing_email)

        elif choice == "5":
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    asyncio.run(main())







